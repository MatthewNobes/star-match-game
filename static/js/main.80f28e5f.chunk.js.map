{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["ButtonNumber","props","className","style","backgroundColor","colors","status","onClick","number","StarElement","utils","range","count","map","starId","PlayAgain","color","gameStatus","Game","useState","random","stars","appendStars","candidateNums","appendCandidateNums","availableNums","appendAvailableNums","secondLeft","appendSecondLeft","useEffect","length","timerId","setTimeout","clearTimeout","setGameState","newCandidateNumbers","sum","newAvailableNums","filter","n","includes","randomSumIn","useGameState","candidatesAreWrong","numberStatus","onNumberClick","currentStatus","concat","cn","startNewGame","available","used","wrong","candidate","arr","reduce","acc","curr","min","max","Array","from","_","i","Math","floor","sets","sums","j","len","candidateSet","candidateSum","push","StarMatch","gameId","appendGameId","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.80f28e5f.chunk.js","sourcesContent":["import React, { useEffect }  from 'react';\nimport { useState } from 'react';\nimport './App.css';\n\nconst ButtonNumber = props => (\n  <button \n    className=\"number\"\n    style={{backgroundColor: colors[props.status]}}\n    onClick={() => props.onClick(props.number, props.status)}\n    >\n      {props.number}\n  </button>\n)\n\nconst StarElement = props => (\n  utils.range(1, props.count).map(starId => \n    <div key={starId} className=\"star\"/>\n  )\n)\n\nconst PlayAgain = props => (\n  <div className='game-done'>\n    <div \n      className=\"message\"\n      style={{color: props.gameStatus === 'lost' ? 'Red' : 'Green'}}\n    >\n      {props.gameStatus === 'lost' ? 'Game Over' : 'Nice! You won.'}\n    </div>\n    <button onClick={props.onClick}>Play Again</button>\n  </div>\n)\n\nconst useGameState = () => {\n  const [stars, appendStars] = useState(utils.random(1, 9));\n  const [candidateNums, appendCandidateNums] = useState([]);\n  const [availableNums, appendAvailableNums] = useState(utils.range(1, 9));\n  const [secondLeft, appendSecondLeft] = useState(10);\n\n  useEffect(() => {\n    if (secondLeft > 0 && availableNums.length > 0) {\n      const timerId = setTimeout(() => {\n        appendSecondLeft(secondLeft - 1);\n      }, 1000)\n      return () => clearTimeout(timerId);\n    }\n  })\n\n  const setGameState = (newCandidateNumbers) => {\n    if (utils.sum(newCandidateNumbers) !== stars) {\n      appendCandidateNums(newCandidateNumbers)\n    } else {\n      const newAvailableNums = availableNums.filter(\n        n => !newCandidateNumbers.includes(n)\n      )\n      appendAvailableNums(newAvailableNums);\n      appendCandidateNums([]);\n      appendStars(utils.randomSumIn(newAvailableNums, 9))\n    }\n  }\n  return { stars, availableNums, candidateNums, secondLeft, setGameState};\n}\n\nconst Game = (props) => {\n  const {\n    stars, \n    availableNums,\n    candidateNums,\n    secondLeft,\n    setGameState\n  } = useGameState();\n\n  const candidatesAreWrong = utils.sum(candidateNums) > stars;\n\n  const gameStatus = availableNums.length === 0 ? 'won' : secondLeft === 0 ? 'lost' : 'active'\n\n  const numberStatus = (number) => {\n    if (!availableNums.includes(number)) {\n      return 'used';\n    } \n    if (candidateNums.includes(number)) {\n      return candidatesAreWrong ? 'wrong' : 'candidate';\n    }\n    return 'available';\n  }\n\n  const onNumberClick = (number, currentStatus) => {\n    if (gameStatus !== 'active' || currentStatus === 'used') {\n      return;\n    }\n    \n    const newCandidateNumbers = \n      currentStatus === 'available' \n        ? candidateNums.concat(number)\n        : candidateNums.filter(cn => cn !== number)\n\n    setGameState(newCandidateNumbers);\n\n  }\n\n  return (\n    <div className=\"game\">\n      <div className=\"help\">\n        Pick 1 or more numbers that sum to the number of stars\n      </div>\n      <div className=\"body\">\n        <div className=\"left\">\n          {gameStatus !== 'active' ? (\n            <PlayAgain onClick={props.startNewGame} gameStatus={gameStatus}/>\n          ) : (\n            <StarElement \n              count={stars}\n            />\n          )}\n        </div>\n        <div className=\"right\">\n        {utils.range(1, 9).map(number => \n            <ButtonNumber \n              key={number} \n              status={numberStatus(number)}\n              number={number} \n              onClick={onNumberClick}\n            />\n          )}\n        </div>\n      </div>\n      <div className=\"timer\">Time Remaining: {secondLeft}</div>\n    </div>\n  );\n};\n\n// Color Theme\nconst colors = {\n  available: 'lightgray',\n  used: 'lightgreen',\n  wrong: 'lightcoral',\n  candidate: 'deepskyblue',\n};\n\n// Math science\nconst utils = {\n  // Sum an array\n  sum: arr => arr.reduce((acc, curr) => acc + curr, 0),\n\n  // create an array of numbers between min and max (edges included)\n  range: (min, max) => Array.from({ length: max - min + 1 }, (_, i) => min + i),\n\n  // pick a random number between min and max (edges included)\n  random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\n\n  // Given an array of numbers and a max...\n  // Pick a random sum (< max) from the set of all available sums in arr\n  randomSumIn: (arr, max) => {\n    const sets = [[]];\n    const sums = [];\n    for (let i = 0; i < arr.length; i++) {\n      for (let j = 0, len = sets.length; j < len; j++) {\n        const candidateSet = sets[j].concat(arr[i]);\n        const candidateSum = utils.sum(candidateSet);\n        if (candidateSum <= max) {\n          sets.push(candidateSet);\n          sums.push(candidateSum);\n        }\n      }\n    }\n    return sums[utils.random(0, sums.length - 1)];\n  },\n};\n\nconst StarMatch = () => {\n  const [gameId, appendGameId] = useState(1)\n\n  return <Game key={gameId} startNewGame={() => appendGameId(gameId + 1)}/>\n}\n\nexport default function App() {\n  return(\n    <StarMatch />\n  )\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}